// <auto-generated />
using System;
using System.Collections.Generic;
using GetUrCourse.Services.UserAPI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GetUrCourse.Services.UserAPI.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20241118131053_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Author", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalCourses")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("integer");

                    b.Property<int>("TotalStudents")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PdfUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Manager", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Department")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasMaxLength(5)
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Student", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("CoursesCompleted")
                        .HasColumnType("integer");

                    b.Property<int>("CoursesInProgress")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int?>("Sex")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "GetUrCourse.Services.UserAPI.Core.Models.User.Name#UserName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("LastName");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Author", b =>
                {
                    b.HasOne("GetUrCourse.Services.UserAPI.Core.Models.User", "User")
                        .WithOne("Author")
                        .HasForeignKey("GetUrCourse.Services.UserAPI.Core.Models.Author", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Certificate", b =>
                {
                    b.HasOne("GetUrCourse.Services.UserAPI.Core.Models.Student", "Student")
                        .WithMany("Certificates")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Manager", b =>
                {
                    b.HasOne("GetUrCourse.Services.UserAPI.Core.Models.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("GetUrCourse.Services.UserAPI.Core.Models.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Review", b =>
                {
                    b.HasOne("GetUrCourse.Services.UserAPI.Core.Models.Author", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetUrCourse.Services.UserAPI.Core.Models.Student", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Student", b =>
                {
                    b.HasOne("GetUrCourse.Services.UserAPI.Core.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("GetUrCourse.Services.UserAPI.Core.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.User", b =>
                {
                    b.OwnsOne("GetUrCourse.Services.UserAPI.Core.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Country");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("GetUrCourse.Services.UserAPI.Core.ValueObjects.SocialLinks", "SocialLinks", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FacebookLink")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("FacebookLink");

                            b1.Property<string>("GitHubLink")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("GitHubLink");

                            b1.Property<string>("InstagramLink")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("InstagramLink");

                            b1.Property<string>("LinkedInLink")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("LinkedInLink");

                            b1.Property<string>("TwitterLink")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("TwitterLink");

                            b1.Property<string>("WebsiteLink")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("WebsiteLink");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Location");

                    b.Navigation("SocialLinks");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Author", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.Student", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GetUrCourse.Services.UserAPI.Core.Models.User", b =>
                {
                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Manager")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
